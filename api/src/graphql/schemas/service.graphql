type ServiceListItem {
	id: Int!
	coverImage: String
	location: String!
	name: String!
	price: Date
	minPrice: Int
	maxPrice: Int
	rating: Float
	company: Company!
}

input FaqInput {
	question: String!
	answer: String!
}

# Maybe there's better solution later
# To use only accepted types for service package
input PackageInput {
	id: String!
	packageRows: [PackageRowsInput!]!
}

input PackageRowsInput {
	name: String!
	value: String!
	type: String!
	description: String
}

input GroupServiceInput {
	name: String!
	description: String!
	minPrice: Date!
	maxPrice: Date!
	unit: UnitInput!
}

input GroupInput {
	name: String!
	services: [GroupServiceInput!]!
}

type Service {
	id: Int!
	name: Int!
	industryId: Int!
	categoryId: Int!
	description: String!
	images: [File!]
	videos: [File!]
	certificates: [File!]
}

input CreateServiceInput {
	name: String!
	industryId: Int!
	categoryId: Int!
	description: String!
	location: String!
	tags: [TagInput!]
	faqs: [FaqInput!]
	images: [FileInput!]
	certificates: [FileInput!]
	videos: [FileInput!]
	price: Int
	packages: [PackageInput!]
	companyId: Int!
	coverImage: String
	companyName: String!
	createdById: Int!
	newTags: [TagInput!]
	minPrice: Date
	maxPrice: Date
}

input FetchServicesInput {
	offset: Int!
	limit: Int!
	searchValue: String
	categoryId: Int
	location: String
	status: BRStatus
	industryId: Int
	minPrice: Date
	maxPrice: Date
}

type ServicesResponse {
	services: [ServiceListItem]!
	count: Int!
}

extend type Mutation {
	createService(input: CreateServiceInput!): CreateResponse!
	deleteServices(ids: [Int!]!): Response!
}

extend type Query {
	services(input: FetchServicesInput): ServicesResponse!
}
