type Project {
	id: Int!
	name: String!
	slug: String!
	endDate: Date!
	image: File
	description: String
	buyingRequests: [ProjectBR!]!
	companyId: Int!
}

type ProjectBR {
	id: Int!
	cover: String
}

input ProjectBRInput {
	id: Int!
	cover: String
}

input CreateProjectInput {
	name: String!
	endDate: Date!
	image: Upload
	description: String
	buyingRequests: [ProjectBRInput!]!
	companyId: Int!
	createdById: Int!
	updatedById: Int
	companyName: String!
}

type GetProjects {
	projects: [Project!]!
	count: Int!
}

type ProjectDetail {
	project: Project!
	createdBy: User!
	updatedBy: User
}

extend type Query {
	projects(companyId: Int!, offset: Int!): GetProjects!
	project(slug: String!): ProjectDetail!
}

extend type Mutation {
	createProject(input: CreateProjectInput!): Response!
	addToProject(projectId: Int!, buyingRequests: [ProjectBRInput!]!): Response!
	deleteProject(id: Int!): Response!
	deleteProjects(ids: [Int]!): Response!
	removeRequestFromProject(id: Int!, brIds: [Int]!): Response!
}
