enum BRStatus {
	OPEN
	CLOSE
	ALL
}

type BuyingRequest {
	id: ID!
	name: String!
	slug: String!
	endDate: Date!
	location: String!
	industryId: Int!
	categoryId: Int!
	description: String
	projects: [Project!]
	sourceTypeId: Int
	createdBy: User!
	minBudget: Date!
	maxBudget: Date!
	minOrder: Int!
	status: String!
	createdAt: Date!
	updatedAt: Date!
	unit: String!
	gallery: [File!]
	minSupplierExperience: Int
	minSupplierSells: Int
	company: Company!
	bids: [Bid!]
	lastOpened: Date!
	discussionQuestions: [BRDiscussionQuestion!]
}

input CreateBuyingRequestInput {
	name: String!
	endDate: Date!
	location: String!
	description: String
	minBudget: Date!
	maxBudget: Date!
	minOrder: Int!
	gallery: [FileInput!]
	unit: String!
	industryId: Int!
	categoryId: Int!
	companyId: Int!
	createdById: Int!
	minSupplierExperience: Int
	minSupplierSells: Int
	sourceTypeId: Int
}

input UpdateBuyingRequestInput {
	name: String!
	endDate: Date!
	location: String!
	description: String
	industryId: Int!
	categoryId: Int!
	minBudget: Date!
	maxBudget: Date!
	minOrder: Int!
	gallery: [FileInput]
	unit: String!
	companyId: Int!
	updatedById: Int!
	minSupplierExperience: Int
	minSupplierSells: Int
	sourceTypeId: Int
}

type BuyingRequestsResponse {
	data: [BuyingRequest]!
	pagination: Pagination!
}

type NameSuggestion {
	name: String!
	highlightedName: String!
}

input FetchBRInput {
	companyId: Int
	offset: Int!
	limit: Int!
	searchValue: String
	categoryId: Int
	location: String
	status: BRStatus
	industryId: Int
	minBudget: Date
	maxBudget: Date
}

extend type Mutation {
	getSuggestion(name: String!, limit: Int!): [NameSuggestion!]
	createBuyingRequest(input: CreateBuyingRequestInput): Response!
	updateBuyingRequest(id: Int!, newValue: UpdateBuyingRequestInput): Response!
	deleteBuyingRequest(id: Int!): Response!
	deleteBuyingRequests(ids: [Int!]!): Response!
}

extend type Query {
	bulkData: Response!
	deleteIndex: Response!
	createIndex: Response!
	adminBuyingRequests(
		companyId: Int!
		input: FetchBRInput!
	): BuyingRequestsResponse!
	buyingRequest(id: Int!): BuyingRequest!
	discoveryBuyingRequests(input: FetchBRInput!): BuyingRequestsResponse!
	buyingRequestBySlug(slug: String!): BuyingRequest!
	getBuyingRequestsByIds(ids: [Int]!): [BuyingRequest]!
}
