type AllowedCompany {
	minSupplierExperience: Float
	minSupplierRating: Float
	minSuplierSells: Float
}

input AllowedCompanyInput {
	minSupplierExperience: Float
	minSupplierRating: Float
	minSuplierSells: Float
}

type BuyingRequest {
	id: ID!
	name: String!
	slug: String!
	endDate: Date!
	location: String!
	description: String
	productName: String!
	minBudget: Date!
	maxBudget: Date!
	minOrder: Int!
	status: String!
	createdAt: Date!
	updatedAt: Date!
	unit: String!
	categories: [Int]
	gallery: [File]
	allowedCompany: AllowedCompany
	commentIds: [Int]
	bidIds: [Int]
	projectIds: [Int]
}

input BuyingRequestInput {
	name: String!
	endDate: Date!
	location: String!
	description: String
	productName: String!
	minBudget: Date!
	maxBudget: Date!
	minOrder: Int!
	gallery: [Upload]
	unit: String!
	categories: [Int]
	allowedCompany: AllowedCompanyInput
	companyId: Int!
	companyName: String!
	createdById: Int!
}

extend type Mutation {
	createBuyingRequest(input: BuyingRequestInput): Response
	deleteBuyingRequest(id: Int!): Response!
	deleteBuyingRequests(ids: [Int!]!): Response!
}

type BuyingRequestsResponse {
	buyingRequests: [BuyingRequest]!
	totalDataCount: Int
}

type BuyingRequestDetails {
	buyingRequest: BuyingRequest!
	createdBy: User!
	updatedBy: User
}

extend type Query {
	buyingRequestsAndCount(
		companyId: Int!
		offset: Int!
	): BuyingRequestsResponse!
	buyingRequest(id: Int!): BuyingRequest!
	buyingRequestBySlug(slug: String!): BuyingRequestDetails!
	getBuyingRequestsByIds(ids: [Int]!): [BuyingRequest]!
}
