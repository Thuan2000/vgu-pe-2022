/* a313debc786f0a6c43c59238dfc8801c75eb3d18
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type CategoriesQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type CategoriesQuery = {
  __typename?: 'Query';
  categories: Array<Types.Maybe<{
    __typename?: 'Category';
    id?: Types.Maybe<number>;
    name?: Types.Maybe<string>;
    slug?: Types.Maybe<string>;
  }>>;
};
export declare const CategoriesDocument: Apollo.DocumentNode;
/**
 * __useCategoriesQuery__
 *
 * To run a query within a React component, call `useCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCategoriesQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesQuery, CategoriesQueryVariables>): Apollo.QueryResult<CategoriesQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesQuery, CategoriesQueryVariables>): Apollo.QueryTuple<CategoriesQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type CategoriesQueryHookResult = ReturnType<typeof useCategoriesQuery>;
export declare type CategoriesLazyQueryHookResult = ReturnType<typeof useCategoriesLazyQuery>;
export declare type CategoriesQueryResult = Apollo.QueryResult<CategoriesQuery, CategoriesQueryVariables>;