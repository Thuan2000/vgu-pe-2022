/* 0fb459400d1e7d6f11dfbe3ba1b4bf426768c5c4
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type BuyingRequestsQueryVariables = Types.Exact<{
  companyId: Types.Scalars['Int'];
}>;
export declare type BuyingRequestsQuery = {
  __typename?: 'Query';
  buyingRequests: Array<Types.Maybe<{
    __typename?: 'BuyingRequest';
    name: string;
    endDate: number;
    categories?: Types.Maybe<Array<Types.Maybe<number>>>;
    minBudget: number;
    maxBudget: number;
    minOrder: number;
    gallery?: Types.Maybe<Array<Types.Maybe<{
      __typename?: 'File';
      location?: Types.Maybe<string>;
    }>>>;
  }>>;
};
export declare type CreateBuyingRequestMutationVariables = Types.Exact<{
  input?: Types.Maybe<Types.BuyingRequestInput>;
}>;
export declare type CreateBuyingRequestMutation = {
  __typename?: 'Mutation';
  createBuyingRequest?: Types.Maybe<{
    __typename?: 'Response';
    success?: Types.Maybe<boolean>;
    message?: Types.Maybe<string>;
  }>;
};
export declare const BuyingRequestsDocument: Apollo.DocumentNode;
/**
 * __useBuyingRequestsQuery__
 *
 * To run a query within a React component, call `useBuyingRequestsQuery` and pass it any options that fit your needs.
 * When your component renders, `useBuyingRequestsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBuyingRequestsQuery({
 *   variables: {
 *      companyId: // value for 'companyId'
 *   },
 * });
 */

export declare function useBuyingRequestsQuery(baseOptions: Apollo.QueryHookOptions<BuyingRequestsQuery, BuyingRequestsQueryVariables>): Apollo.QueryResult<BuyingRequestsQuery, Types.Exact<{
  companyId: number;
}>>;
export declare function useBuyingRequestsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BuyingRequestsQuery, BuyingRequestsQueryVariables>): Apollo.QueryTuple<BuyingRequestsQuery, Types.Exact<{
  companyId: number;
}>>;
export declare type BuyingRequestsQueryHookResult = ReturnType<typeof useBuyingRequestsQuery>;
export declare type BuyingRequestsLazyQueryHookResult = ReturnType<typeof useBuyingRequestsLazyQuery>;
export declare type BuyingRequestsQueryResult = Apollo.QueryResult<BuyingRequestsQuery, BuyingRequestsQueryVariables>;
export declare const CreateBuyingRequestDocument: Apollo.DocumentNode;
export declare type CreateBuyingRequestMutationFn = Apollo.MutationFunction<CreateBuyingRequestMutation, CreateBuyingRequestMutationVariables>;
/**
 * __useCreateBuyingRequestMutation__
 *
 * To run a mutation, you first call `useCreateBuyingRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBuyingRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBuyingRequestMutation, { data, loading, error }] = useCreateBuyingRequestMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useCreateBuyingRequestMutation(baseOptions?: Apollo.MutationHookOptions<CreateBuyingRequestMutation, CreateBuyingRequestMutationVariables>): Apollo.MutationTuple<CreateBuyingRequestMutation, Types.Exact<{
  input?: any;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type CreateBuyingRequestMutationHookResult = ReturnType<typeof useCreateBuyingRequestMutation>;
export declare type CreateBuyingRequestMutationResult = Apollo.MutationResult<CreateBuyingRequestMutation>;
export declare type CreateBuyingRequestMutationOptions = Apollo.BaseMutationOptions<CreateBuyingRequestMutation, CreateBuyingRequestMutationVariables>;